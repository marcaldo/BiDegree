@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="clock">
    @if (TimeFormat != TimeFormatType.None)
    {
        <div class="time">@_dateTimePartsDisplay.Time <span class="ampm">@_dateTimePartsDisplay.AmPm</span></div>
    }
    @if (DateFormat != DateFormatType.None)
    {
        <div class="date">@_dateTimePartsDisplay.Date</div>
    }
</div>

@code {
    private DateTimePartsDisplay _dateTimePartsDisplay = new DateTimePartsDisplay();
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/timers.js").AsTask();

    [Parameter] public TimeFormatType TimeFormat { get; set; }
    [Parameter] public DateFormatType DateFormat { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (TimeFormat == TimeFormatType.None && DateFormat == DateFormatType.None) { return; }

        var dotNetObjectReference = DotNetObjectReference.Create(this);

        var module = await Module;
        await module.InvokeVoidAsync("clock", dotNetObjectReference);
    }


    [JSInvokable]
    public void Timer_elapsed()
    {
        DateTime now = DateTime.Now;

        if (TimeFormat == TimeFormatType.T12hs)
        {
            _dateTimePartsDisplay.Time = now.ToString("h:mm");
            _dateTimePartsDisplay.AmPm = now.ToString("tt");
        }
        else
        {
            _dateTimePartsDisplay.Time = now.ToString("HH:mm");
            _dateTimePartsDisplay.AmPm = "";
        }

        _dateTimePartsDisplay.Date = DateFormat switch
        {
            DateFormatType.None => "",
            // Date1: TUE, Set 23
            DateFormatType.Date1_xWD_M_D => $"{now.DayOfWeek.ToString()[..3].ToUpper()}, {now:MMM} {now:dd}",
            // Date2: Tuesday 23
            DateFormatType.Date2_WD_D => $"{now.DayOfWeek} {now:dd}",
            // Date3: Tuesday
            DateFormatType.Date3_WD => $"{now.DayOfWeek}",
            // Date4: 23 SEP 2021
            DateFormatType.Date4_DD_MMM_YY => $"{now:dd} {now:MMM} {now:yyyy}",
            // Date5: SEP 23 2021
            DateFormatType.Date5_MMM_DD_YY => $"{now:MMM} {now:dd} {now:yyyy}",
            // Date6: 23/09/21
            DateFormatType.Date6_DD_MM_YY => $"{now:dd}/{now:MM}/{now:yyyy}",
            // Date7: 09/23/21
            DateFormatType.Date7_MM_DD_YY => $"{now:MM}/{now:dd}/{now:yyyy}"
        };

    StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    class DateTimePartsDisplay
    {
        public string Time { get; set; }
        public string AmPm { get; set; }
        public string Date { get; set; }
    }
}
