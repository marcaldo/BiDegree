@using BiDegree.Models
@using BiDegree.Shared
@using System.Globalization
@using Blazored.LocalStorage

@inherits WeatherBase

@if (IsVisibleWeatherComponent && CurrentWeather != null)
{
    SetValues();

    <div class="city">@CurrentWeather.name</div>
    <div class="iconWeather">
        <IconWeather Name="@weatherIcon" Size="180" />
    </div>
    <div class="weather">
        <div class="panel1">
            <div class="tempDisplay">

                <div class="temp">
                    <TemperatureValues Value="CurrentWeather.main.temp" Units="Units" />
                </div>
            </div>

            <div class="datetime">
                <Clock />
            </div>

        </div>
        <div class="panel2">
            <div class="humid">
                <Icon Name="Icon.IconType.Humidity" />
                <div>@CurrentWeather.main.humidity <small>%</small></div>
            </div>
            <div class="humid-wind-val">
                <Icon Name="Icon.IconType.Wind" />
                <div>
                    @windSpeed.ToDecimalString() <small>@windSpeedUnits</small>
                </div>
                <div style="transform: rotate(@windDir);">
                    <Icon Name="Icon.IconType.WindDirecction" Size="32" />

                </div>
            </div>
            <FeelsLike Value="CurrentWeather.main.feels_like" Units="Units" />
            <div class="more">
                <table>
                    <tbody>
                        @if (Units is UnitsType.Metric)
                        {
                            <tr>
                                <td class="title">Low</td>
                                <td><Icon Name="Icon.IconType.TemperatureLow" Fill="blue" /></td>
                                <td>@CurrentWeather.main.temp_min.ToDecimalString() °C</td>
                                @if (showBothTemps)
                                {
                                    <td>@CurrentWeather.main.temp_min.ToFahrenheitString() °F</td>
                                }
                            </tr>
                            <tr>
                                <td class="title">High</td>
                                <td><Icon Name="Icon.IconType.TemperatureHigh" Fill="#9e300f" /></td>
                                <td>@CurrentWeather.main.temp_max.ToDecimalString() °C</td>
                                @if (showBothTemps)
                                {
                                    <td>@CurrentWeather.main.temp_max.ToFahrenheitString() °F</td>
                                }
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td class="title">Low</td>
                                <td><Icon Name="Icon.IconType.TemperatureLow" Fill="blue" /></td>
                                <td>@CurrentWeather.main.temp_min.ToDecimalString() °F</td>
                                @if (showBothTemps)
                                {
                                    <td>@CurrentWeather.main.temp_min.ToCelsiusString() °C</td>
                                }
                            </tr>
                            <tr>
                                <td class="title">High</td>
                                <td><Icon Name="Icon.IconType.TemperatureHigh" Fill="#9e300f" /></td>
                                <td>@CurrentWeather.main.temp_max.ToDecimalString() °F</td>
                                @if (showBothTemps)
                                {
                                    <td>@CurrentWeather.main.temp_max.ToCelsiusString() °C</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
                <div>
                    <span>Updated as of @RefreshTime()</span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string weatherIcon;
    private string bgImage;
    private string windSpeedUnits;
    private float windSpeed;
    private string windDir;
    private bool showBothTemps = true;


    private void SetValues()
    {
        var icon = CurrentWeather.weather[0].icon;

        //iconUrl = $"{iconUrlBase}img/wn/{icon}@4x.png";
        weatherIcon = $"w{icon}";
        bgImage = $"img/{icon}.jpg";
    }

    private string DisplayTemp(float temp)
    {
        return Units is UnitsType.Metric
                        ? $"{temp.ToDecimalString()} °C{temp.ToFahrenheitString()} °F"
                        : $"{temp.ToDecimalString()} °F{temp.ToCelsiusString()} °C";
    }

    private string RefreshTime()
    {
        var datePattern = DateTimeFormatInfo.CurrentInfo.MonthDayPattern;
        var timePattern = DateTimeFormatInfo.CurrentInfo.ShortTimePattern;
        return DateTime.Now.ToString($"{datePattern}, {timePattern}");
    }
}

