@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
<div class="tempHumid">
    <div class="temp">
        @if (Units is UnitsType.Metric)
        {
            <div class="t1">@Value.ToDecimalString()<span class="unit">°C</span></div>
            if (tempFormatSelection == TemperatureFormatType.CF)
            {
                <div class="t2">@Value.ToFahrenheitString()<span class="unit">°F</span></div>
            }
        }
        else
        {
            <div class="t1">@Value.ToDecimalString()<span class="unit">°F</span></div>
            if (tempFormatSelection == TemperatureFormatType.FC)
            {
                <div class="t2">@Value.ToCelsiusString()<span class="unit">°C</span></div>
            }
        }
    </div>
    @if (ShowHumidity)
    {
        <div class="h1">
            <Icon Name="Icon.IconType.Humidity" Size="24" />@HumidityValue<span class="hpercent">%</span>
            <AirQuality AirQualityIndex="@AirQualityIndex" />
        </div>
    }
</div>
@code {
    [Parameter] public UnitsType Units { get; set; }
    [Parameter] public float Value { get; set; }
    [Parameter] public float HumidityValue { get; set; }
    [Parameter] public int AirQualityIndex { get; set; }
    [Parameter] public bool ShowHumidity { get; set; } = true;
    private TemperatureFormatType tempFormatSelection = TemperatureFormatType.CF;


    protected override async Task OnInitializedAsync()
    {
        var showBothTempsSetting = await LocalStorage.GetItemAsync<bool?>(Constants.KeyName_ShowBothTemps);
        tempFormatSelection = await LocalStorage.GetItemAsync<TemperatureFormatType?>(Constants.KeyName_TempFormat) ?? TemperatureFormatType.CF;
    }
}
