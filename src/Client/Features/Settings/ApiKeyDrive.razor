@inject ILocalStorageService localStorage

<div class="form-group">
	<label for="dApiKeyData">Drive API Key:</label>
	<div class="info">
		To use this app you need an API key for Google Drive.
	</div>
	<input id="dApiKeyData" class="form-control" @bind="settings.DriveApiKeyValue" @onfocus="()=>ClearSavedMark()" />
	<label for="dFolderId">Folder id:</label>
	<input id="
        " class="form-control" @bind="settings.DriveFolderId" @onfocus="()=>ClearSavedMark()" />
	<div class="save">
		<Icon Name="Icon.IconType.Ok" Visible="Saved" Size="25" Fill="limegreen" />
		<button class="btn btn-primary" @onclick="SaveApiKey">Save</button>
	</div>
</div>
@code {
	protected bool Saved { get; set; } = false;
	private Settings settings = new Settings();

	protected override async Task OnInitializedAsync()
	{
		settings.DriveApiKeyValue = await GetStorageValue(Constants.KeyName_DriveApiKey);
		settings.DriveFolderId = await GetStorageValue(Constants.KeyName_DriveFolderId);
	}

	protected async Task<string> GetStorageValue(string storageKey)
	{
		return await localStorage.GetItemAsync<string>(storageKey);
	}

	protected void ClearSavedMark()
	{
		Saved = false;
		StateHasChanged();
	}

	protected async Task SaveApiKey()
	{
		await localStorage.SetItemAsync(Constants.KeyName_DriveApiKey, settings.DriveApiKeyValue);
		await localStorage.SetItemAsync(Constants.KeyName_DriveFolderId, settings.DriveFolderId);

		Saved = (settings.DriveApiKeyValue == await GetStorageValue(Constants.KeyName_DriveApiKey)
					&& settings.DriveFolderId == await GetStorageValue(Constants.KeyName_DriveFolderId)
					);

		StateHasChanged();
	}


}
