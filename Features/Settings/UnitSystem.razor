@inject ILocalStorageService localStorage
<div class="form-group settings">
	<label for="uSelector">First show:</label>
	<div class="selector">
		<div class="unit-def">°C</div>
		<label class="switch">
			<input id="uSelector" type="checkbox" @bind="isCheckedUnits" @onclick="()=>SaveUnitsSelection(!isCheckedUnits)" />
			<span class="slider round"></span>
		</label>
		<div class="unit-def">°F</div>
	</div>
	<div class="check-selection">
		<input id="showBothTemps" type="checkbox" @bind="isCheckedBothTemps" @onclick="()=>SaveShowBothTemsSelection(!isCheckedBothTemps)" />
		<label for="showBothTemps">Show both Fahrenheit and Celsius.</label>
	</div>
</div>
@code {
	private bool isCheckedUnits { get; set; } = false;
	private bool isCheckedBothTemps { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		var units = await localStorage.GetItemAsync<UnitsType?>(Constants.KeyUnits);
		var showBothTemps = await localStorage.GetItemAsync<bool?>(Constants.KeyShowBothTemps);

		if (units is null) { units = UnitsType.Metric; }
		if (showBothTemps is null) { showBothTemps = true; }

		isCheckedUnits = units == UnitsType.Imperial;
		isCheckedBothTemps = (bool)showBothTemps;
	}


	protected async Task SaveUnitsSelection(bool isChecked)
	{
		UnitsType units = isChecked ? UnitsType.Imperial : UnitsType.Metric;
		await localStorage.SetItemAsync(Constants.KeyUnits, units);
	}

	protected async Task SaveShowBothTemsSelection(bool isChecked)
	{
		await localStorage.SetItemAsync(Constants.KeyShowBothTemps, isChecked);
	}
}
