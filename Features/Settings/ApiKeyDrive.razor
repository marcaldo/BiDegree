@inject ILocalStorageService localStorage

<div class="form-group">
    <label for="dFolderId">Pictures folder name:</label>
    <div class="info">
        Enter the name of the folder with the files to display. The default is "Photos". This is case sensitive.
    </div>
    <input id="dFolderId" class="form-control" @bind="settings.DriveFolderId" @onfocus="()=>ClearSavedMark()" />
    <div class="save">
        <Icon Name="Icon.IconType.Ok" Visible="Saved" Size="25" Fill="limegreen" />
        <button class="btn btn-primary" @onclick="SaveApiKey">Save</button>
    </div>
</div>
@code {
    protected bool Saved { get; set; } = false;
    private Settings settings = new Settings();

    protected override async Task OnInitializedAsync()
    {
        settings.DriveApiKeyValue = await GetStorageValue(Constants.KeyName_DriveApiKey);
        settings.DriveFolderId = await GetStorageValue(Constants.KeyName_DriveFolderId);

        settings.DriveFolderId ??= Constants.DefaultValue_FolderName;
    }

    protected async Task<string> GetStorageValue(string storageKey)
    {
        return await localStorage.GetItemAsync<string>(storageKey);
    }

    protected void ClearSavedMark()
    {
        Saved = false;
        StateHasChanged();
    }

    protected async Task SaveApiKey()
    {
        var folderName = string.IsNullOrWhiteSpace(settings.DriveFolderId)
                ? Constants.DefaultValue_FolderName
                : settings.DriveFolderId;


        await localStorage.SetItemAsync(Constants.KeyName_DriveApiKey, settings.DriveApiKeyValue);
        await localStorage.SetItemAsync(Constants.KeyName_DriveFolderId, folderName);

        Saved = (settings.DriveApiKeyValue == await GetStorageValue(Constants.KeyName_DriveApiKey)
                    && settings.DriveFolderId == await GetStorageValue(Constants.KeyName_DriveFolderId)
                    );

        StateHasChanged();
    }


}
