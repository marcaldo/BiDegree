@using System.Web
@inject ILocalStorageService localStorage
@inject ISyncLocalStorageService localStorageSync

<div class="form-group">
	<label for="City">City:</label>
	<div class="info">
		If your browser doesn't support geolocation or doesn't allow the Location access to your app, you can alternately enter the city's name where you want to check the weather.
		<br />
		City name must be followed with the internet country code, separated by a comma (e.g.: "Minneapolis, us"; "Barcelona, es"; "Buenos Aires, ar").
	</div>
	<input id="cityData" class="form-control" @bind="settings.City" @onfocus="()=>ClearSavedMark()" />
	<br />
	<label for="geoLocation">Use this City instead of automatic location (automatic location needs permission granted in the browser).</label>
	<ToggleSwitch Id="geoLocation" OnToggle="((useCity)=>SetUseCity(useCity))" SetAsChecked="settings.UseCity" />
	<div class="save">
		<Icon Name="Icon.IconType.Ok" Visible="Saved" Size="25" Fill="limegreen" />
		<button class="btn btn-primary" @onclick="SaveCityAsync">Save</button>
	</div>
</div>
<div class="form-group">
</div>
@code {
	protected bool Saved { get; set; } = false;
	private Settings settings = new Settings();
	private bool _initialStatus;

	private bool useCity
	{
		get
		{
			return settings.UseCity;
		}
		set
		{
			settings.UseCity = value;
			ClearSavedMark();
		}
	}

	protected void SetUseCity(bool useCity)
	{
		settings.UseCity = useCity;
		ClearSavedMark();
	}
	protected override void OnInitialized()
	{
		settings.UseCity = localStorageSync.GetItem<bool>(Constants.KeyName_UseCity);
	}

	protected override async Task OnInitializedAsync()
	{
		settings.City = await GetCityAsync();

	}

	protected async Task<string> GetCityAsync()
	{
		var cityEncoded = await localStorage.GetItemAsync<string>(Constants.KeyName_City);
		return HttpUtility.UrlDecode(cityEncoded);
	}

	protected void ClearSavedMark()
	{
		Saved = false;
		StateHasChanged();
	}

	protected async Task SaveCityAsync()
	{
		await localStorage.SetItemAsync(Constants.KeyName_City, HttpUtility.UrlEncode(settings.City));
		await localStorage.SetItemAsync(Constants.KeyName_UseCity, settings.UseCity);
		Saved = settings.City == await GetCityAsync();
		StateHasChanged();
	}

}
