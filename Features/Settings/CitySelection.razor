@using System.Web
@inject ILocalStorageService localStorage

<EditForm Model="settings" OnValidSubmit="() => SaveCityAsync()">
    <div class="form-group">
        <label for="City">City:</label>
        <div class="info">
            If your browser doesn't support geolocation or doesn't allow the Location access to your app, you can alternately enter the city's name where you want to check the weather.
            <br />
            City name must be followed with the internet country code, separated by a comma (e.g.: "Minneapolis, us"; "Barcelona, es"; "Buenos Aires, ar").
        </div>
        <InputText id="cityData" class="form-control" @bind-Value="settings.City" @onfocus="()=>ClearSavedMark()" />
        <div class="check-selection">
            <input id="geoLocation" type="checkbox" @bind="useCity" />
            <label for="geoLocation">Use this City instead of automatic location (automatic location needs permission granted in the browser).</label>
        </div>
        <div class="save">
            <Icon Name="Icon.IconType.Ok" Visible="Saved" Size="25" Fill="limegreen" />
            <button class="btn btn-primary">Save</button>
        </div>
    </div>
    <div class="form-group">
    </div>
</EditForm>
@code {
    protected bool Saved { get; set; } = false;
    private Settings settings = new Settings();
    
    private bool useCity
    {
        get => settings.UseCity;
        set
        {
            settings.UseCity = value;
            ClearSavedMark();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        settings.City = await GetCityAsync();
        settings.UseCity = await localStorage.GetItemAsync<bool>(Constants.KeyUseCity);
        Console.WriteLine(settings.UseCity);
    }

    protected async Task<string> GetCityAsync()
    {
        var cityEncoded = await localStorage.GetItemAsync<string>(Constants.KeyCity);
        return HttpUtility.UrlDecode(cityEncoded);
    }

    protected void ClearSavedMark()
    {
        Saved = false;
        StateHasChanged();
    }

    protected async Task SaveCityAsync()
    {
        await localStorage.SetItemAsync(Constants.KeyCity, HttpUtility.UrlEncode(settings.City));
        await localStorage.SetItemAsync(Constants.KeyUseCity, settings.UseCity);
        Saved = settings.City == await GetCityAsync();
        StateHasChanged();
    }

}
