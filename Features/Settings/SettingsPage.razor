@page "/settings"
@inject NavigationManager NavManager
@inject ISyncLocalStorageService LocalStorage

<h3>App Settings</h3>
<button @onclick="(()=>seeSwitch(_switchStatus))">See</button>

<ul class="settings-group">
	@*<li><UnitSystem /></li>*@
	<li><RefreshTimer /></li>
	<li><CitySelection /></li>
	<li><TimeFormat /></li>
	<li><PhotoFrameShowTime /></li>
	<li><StartPage /></li>
	<li>
		<button class="btn btn-secondary" @onclick="() => GoToApiSettings()">
			<Icon Name="Icon.IconType.Globe" Size="40" Fill="white" />&nbsp;API Settings
		</button>
	</li>
</ul>
<About />
@code {
	private string openWeatherApi;
	private string driveApi;
	private string driveFolder;
	private string defaultStartPage;
	private int elapsedSlideShow;
	private int weatherRefreshTime;
	private bool? showBothTemps;
	private string city;

	protected override void OnInitialized()
	{
		SetSettingsFromQueryString();
	}

	private string _text = "Hola";
	private void seeTXT(string txt)
	{
		
		Console.WriteLine(txt);
	}

	private bool _switchStatus;
	private bool _switchStatus2;
	private void seeSwitch(bool switchStatus)
	{
		_switchStatus = switchStatus;
		Console.WriteLine(switchStatus);
	}


	private void GoToApiSettings()
	{
		NavManager.NavigateTo($"{NavManager.BaseUri}apisettings", forceLoad: true);
	}

	private void SetSettingsFromQueryString()
	{
		NavManager.TryGetQueryString<string>(Constants.KeyName_WeatherApiKey, out openWeatherApi);
		NavManager.TryGetQueryString<string>(Constants.KeyName_DriveApiKey, out driveApi);
		NavManager.TryGetQueryString<string>(Constants.KeyName_DriveFolderId, out driveFolder);
		NavManager.TryGetQueryString<string>(Constants.KeyName_StartPage, out defaultStartPage);
		NavManager.TryGetQueryString<string>(Constants.KeyName_City, out city);
		NavManager.TryGetQueryString<int>(Constants.KeyName_RefreshTime, out weatherRefreshTime);
		NavManager.TryGetQueryString<bool?>(Constants.KeyName_ShowBothTemps, out showBothTemps);

		if (!string.IsNullOrEmpty(openWeatherApi)) { LocalStorage.SetItem(Constants.KeyName_WeatherApiKey, openWeatherApi); }
		if (!string.IsNullOrEmpty(driveApi)) { LocalStorage.SetItem(Constants.KeyName_DriveApiKey, driveApi); }
		if (!string.IsNullOrEmpty(driveFolder)) { LocalStorage.SetItem(Constants.KeyName_DriveFolderId, driveFolder); }
		if (elapsedSlideShow > 0) { LocalStorage.SetItem(Constants.KeyName_ShowTime, elapsedSlideShow); }
		if (weatherRefreshTime > 0) { LocalStorage.SetItem(Constants.KeyName_RefreshTime, weatherRefreshTime); }
		if (showBothTemps != null) { LocalStorage.SetItem(Constants.KeyName_ShowBothTemps, (bool)showBothTemps); }

		if (!string.IsNullOrEmpty(city))
		{
			LocalStorage.SetItem(Constants.KeyName_City, city);
			LocalStorage.SetItem(Constants.KeyName_UseCity, true);
		}

		if (!string.IsNullOrEmpty(defaultStartPage))
		{
			LocalStorage.SetItem(Constants.KeyName_StartPage, defaultStartPage);
			NavManager.NavigateTo($"{NavManager.BaseUri}{defaultStartPage}", forceLoad: false);
		}

	}

}
