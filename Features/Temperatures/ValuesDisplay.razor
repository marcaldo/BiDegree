<div id="@isValueId" class="values">

    @if (Units is UnitsType.Metric)
    {
        <div>@Celsius °C</div>
        <div class="tube @tubeClass"></div>
        <div>@Fahrenheit °F</div>
    }
    else
    {
        <div>@Fahrenheit °F</div>
        <div class="tube @tubeClass"></div>
        <div>@Celsius °C</div>
    }

</div>

@code {
    [Parameter] public float Value { get; set; }
    [Parameter] public UnitsType Units { get; set; }
    [Parameter] public TubeFillType TubeFill { get; set; }

    protected string Fahrenheit { get; set; }
    protected string Celsius { get; set; }
    private string tubeClass;
    private string isValueId;

    protected override void OnInitialized()
    {
        if (Units is UnitsType.Metric)
        {
            Fahrenheit = Value.ToFahrenheitString();
            Celsius = Value.ToDecimalString();
        }
        else
        {
            Celsius = Value.ToCelsiusString();
            Fahrenheit = Value.ToDecimalString();
        }

        switch (TubeFill)
        {
            case TubeFillType.Empty: tubeClass = ""; break;
            case TubeFillType.IsValue: tubeClass = "is-value"; isValueId = "theTemp"; break;
            case TubeFillType.Fill: tubeClass = "fill"; break;
        }

    }

    public enum TubeFillType
    {
        Empty, Fill, IsValue
    }
}
