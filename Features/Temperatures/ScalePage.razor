@page "/scale"
@page "/scale/{temp}/"
@using Blazored.LocalStorage
@inject ISyncLocalStorageService LocalStorage
@inject IJSRuntime JS


<div class="templist">
    @for (float t = maxT; t >= minT; t = t - pitch)
    {
        var tubeFill = ValuesDisplay.TubeFillType.Empty;
        if (Math.Round(t, 2) == Math.Round(selectedTemp, 2))
        {
            tubeFill = ValuesDisplay.TubeFillType.IsValue;
        }
        else if (t < selectedTemp)
        {
            tubeFill = ValuesDisplay.TubeFillType.Fill;
        }

        <ValuesDisplay Value="@t" Units="@Units" TubeFill="@tubeFill" />
    }
</div>
<div class="converter">
    <input class="form-control" type="number" id="celsius" />
    <div class="bulb"></div>
    <input class="form-control" type="number" id="fahrenheit" />
</div>

<AnchorNavigation />

@code{
    [Parameter] public string temp { get; set; }
    const float pitch = 1.0f;
    private UnitsType Units;

    private float selectedTemp;
    private float minT;
    private float maxT;

    protected override void OnInitialized()
    {
        Units = LocalStorage.GetItem<UnitsType?>(Constants.KeyUnits) ?? UnitsType.Metric;

        if (!float.TryParse(temp, out selectedTemp))
        {
            selectedTemp = Units == UnitsType.Metric ? 0 : 32;  // 0°C = 32°F
        }

        minT = selectedTemp - 100;
        maxT = selectedTemp + 100;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeAsync<string>("BlazorScrollToId", "theTemp");
        }
    }


}