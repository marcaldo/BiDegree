@page "/"
@inject HttpClient Http
@inject IWeatherApi OpenWeather
@inject IJSRuntime JS

@if (currentWeather == null)
{
    <div><img src="img/loading.gif" /></div>
}
else
{
    <Weather CurrentWeather="@currentWeather" Units="@units" OnClick="RefreshHandler" />
}

@code{
    private static Func<float, float, Task> _getWeatherFunc;
    protected CurrentWeather currentWeather { get; set; }
    protected UnitsType units = UnitsType.Metric;

    public async Task RefreshHandler()
    {
        await GetCurrentWeather(currentWeather.coord.lat, currentWeather.coord.lon);
    }

    protected override void OnInitialized()
    {
        _getWeatherFunc = GetWeather;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetGeoLocation();
    }

    public async Task GetGeoLocation()
    {
       await JS.InvokeAsync<string>("getCurrentLocation");
    }

    [JSInvokable]
    public static void GetWeatherCaller(float lat, float lon)
    {
        _getWeatherFunc.Invoke(lat, lon);
    }

    private async Task GetWeather(float lat, float lon)
    {
        await GetCurrentWeather(lat, lon);

        StateHasChanged();
    }

    private async Task GetCurrentWeather(float lat, float lon)
    {
        currentWeather = await OpenWeather.GetCurrentWeatherByCoords(lat, lon, units.ToString().ToLower());
    }

}