@using BiDegree.Models
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
<style>
    /* Full background image from https://www.w3schools.com/howto/howto_css_full_page.asp */
    body {
        background-image: url("@bgImage");
        height: 100%;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>
<div class="weather">
    <div class="status">
        <div class="datetime">
            <Clock />
        </div>
        <div class="icon">
            <img src="@iconUrl" />
            <div class="place">
                <div class="city">@CurrentWeather.name</div>
                <div class="lastupd" @onclick="() => OnClick.InvokeAsync()">
                    @DateTime.Now.ToString("g")&nbsp;<Icon Name="Icon.IconType.Refresh" Size="20" />
                </div>
            </div>
        </div>
    </div>
    <div class="temp">
        <TemperatureValues Value="CurrentWeather.main.temp" Units="UnitsType.Metric" />
    </div>

    <dic class="humid-wind">
        <dic class="humid">
            <Icon Name="Icon.IconType.Humidity" />
            <div>@CurrentWeather.main.humidity %</div>
        </dic>
        <dic class="humid">
            <Icon Name="Icon.IconType.Wind" />
            <div>@CurrentWeather.main.humidity %</div>
        </dic>
    </dic>
    <div class="more">
        <table>
            <tbody>
                @if (Units is UnitsType.Metric)
                {
                    <tr>
                        <td class="title">Min</td>
                        <td><Icon Name="Icon.IconType.TemperatureLow" Fill="blue" /></td>
                        <td>@CurrentWeather.main.temp_min.ToDecimal() °C</td>
                        <td>@CurrentWeather.main.temp_min.ToFahrenheit() °F</td>
                    </tr>
                    <tr>
                        <td class="title">Max</td>
                        <td><Icon Name="Icon.IconType.TemperatureHigh" Fill="#9e300f" /></td>
                        <td>@CurrentWeather.main.temp_max.ToDecimal() °C</td>
                        <td>@CurrentWeather.main.temp_max.ToFahrenheit() °F</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td class="title">Min</td>
                        <td><Icon Name="Icon.IconType.TemperatureLow" Fill="blue" /></td>
                        <td>@CurrentWeather.main.temp_min.ToDecimal() °F</td>
                        <td>@CurrentWeather.main.temp_min.ToCelsius() °C</td>
                    </tr>
                    <tr>
                        <td class="title">Max</td>
                        <td><Icon Name="Icon.IconType.TemperatureHigh" Fill="#9e300f" /></td>
                        <td>@CurrentWeather.main.temp_max.ToDecimal() °F</td>
                        <td>@CurrentWeather.main.temp_max.ToCelsius() °F</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private const string iconUrlBase = "https://openweathermap.org/";
    private string iconUrl { get; set; }
    private string bgImage { get; set; }
    private string windSpeedUnits = "m/s";

    [Parameter] public CurrentWeather CurrentWeather { get; set; }
    [Parameter] public UnitsType Units { get; set; }
    [Parameter] public EventCallback<string> OnClick { get; set; }

    protected override void OnParametersSet()
    {
        var icon = CurrentWeather.weather[0].icon;

        iconUrl = $"{iconUrlBase}img/wn/{icon}@4x.png";
        bgImage = $"img/{icon}.jpg";
    }

    private string DisplayTemp(float temp)
    {
        return Units is UnitsType.Metric
                        ? $"{temp.ToDecimal()} °C{temp.ToFahrenheit()} °F"
                        : $"{temp.ToDecimal()} °F{temp.ToCelsius()} °C";
    }

}
