@using BiDegree.Models
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
<style>
    /* Full background image from https://www.w3schools.com/howto/howto_css_full_page.asp */
    body {
        background-image: url("@_bgImage");
        height: 100%;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>
<div class="weather">
    <div class="icon"><img src="@_iconUrl" /></div>
    <div class="city">@CurrentWeather.name</div>
    <div class="temp">
        <Icon Name="temperature" />
        @if (Units is UnitsType.Metric)
        {
            <div class="t1">@CurrentWeather.main.temp.ToDecimal()<span class="unit">°C</span></div>
            <div class="t2">@CurrentWeather.main.temp.ToFahrenheit()<span class="unit">°F</span></div>
        }
        else
        {
            <div class="t1">@CurrentWeather.main.temp.ToDecimal()<span class="unit">°F</span></div>
            <div class="t2">@CurrentWeather.main.temp.ToCelsius()<span class="unit">°C</span></div>
        }
    </div>

    <dic class="humid">
        <Icon Name="droplet" />
        <div>@CurrentWeather.main.humidity %</div>
    </dic>
    <div class="datetime">
        <Clock />
    </div>

    <div class="more">
        <table>
            <tbody>
                @if (Units is UnitsType.Metric)
                {
                    <tr>
                        <td class="title">Min</td>
                        <td><Icon Name="temp-low" Fill="blue" /></td>
                        <td>@CurrentWeather.main.temp_min.ToDecimal() °C</td>
                        <td>@CurrentWeather.main.temp_min.ToFahrenheit() °F</td>
                    </tr>
                    <tr>
                        <td class="title">Max</td>
                        <td><Icon Name="temp-high" Fill="#9e300f" /></td>
                        <td>@CurrentWeather.main.temp_max.ToDecimal() °C</td>
                        <td>@CurrentWeather.main.temp_max.ToFahrenheit() °F</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td class="title">Min</td>
                        <td><Icon Name="temp-low" Fill="blue" /></td>
                        <td>@CurrentWeather.main.temp_min.ToDecimal() °F</td>
                        <td>@CurrentWeather.main.temp_min.ToCelsius() °C</td>
                    </tr>
                    <tr>
                        <td class="title">Max</td>
                        <td><Icon Name="temp-high" Fill="#9e300f" /></td>
                        <td>@CurrentWeather.main.temp_max.ToDecimal() °F</td>
                        <td>@CurrentWeather.main.temp_max.ToCelsius() °F</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="lastupd">
        <div>@LastUpate.ToString("g")</div>
        <div class="refresh"><Icon Name="refresh" /></div>
    </div>
</div>
@code {
    [Parameter] public CurrentWeather CurrentWeather { get; set; }
    [Parameter] public UnitsType Units { get; set; }
    [Parameter] public DateTime LastUpate { get; set; } = DateTime.Now;

    private const string _iconUrlBase = "https://openweathermap.org/";
    private string _iconUrl { get; set; }
    private string _bgImage { get; set; }

    protected override void OnParametersSet()
    {
        var icon = CurrentWeather.weather[0].icon;

        _iconUrl = $"{_iconUrlBase}img/wn/{icon}@4x.png";
        _bgImage = $"img/{icon}.jpg";
    }

    private string DisplayTemp(float temp)
    {
        return Units is UnitsType.Metric
                        ? $"{temp.ToDecimal()} °C{temp.ToFahrenheit()} °F"
                        : $"{temp.ToDecimal()} °F{temp.ToCelsius()} °C";
    }



}
